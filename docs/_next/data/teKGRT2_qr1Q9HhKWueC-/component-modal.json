{"pageProps":{"markdoc":{"content":[{"$$mdtype":"Tag","name":"p","attributes":{},"children":["Let's create a nestable Modal component."]},{"$$mdtype":"Tag","name":"ExampleModal","attributes":{},"children":[]},{"$$mdtype":"Tag","name":"h2","attributes":{"id":"1-quick-way-using-attached-overlay-component"},"children":["1. Quick Way - using ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["AttachedOverlay"]}," component"]},{"$$mdtype":"Tag","name":"Fence","attributes":{"language":"jsx"},"children":["// coming soon\n"]},{"$$mdtype":"Tag","name":"h2","attributes":{"id":"2-custom-way-using-use-overlay-hook"},"children":["2. Custom Way - using ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["useOverlay"]}," hook"]},{"$$mdtype":"Tag","name":"Fence","attributes":{"language":"jsx"},"children":["import React, { cloneElement } from 'react';\nimport clsx from 'clsx';\nimport { XIcon } from '@heroicons/react/solid';\nimport {\n  FloatingTree,\n  useFloatingNodeId,\n  useFloatingParentNodeId,\n} from '@floating-ui/react-dom-interactions';\n\nimport { useOverlay, IOverlayProps } from 'react-useoverlay';\n\nexport interface IModalProps\n  extends Pick<\n    IOverlayProps,\n    'useDismiss' | 'interactive' | 'useMotion' | 'useFocusManager'\n  > {\n  header: (close: () => void) => JSX.Element | string;\n  content: (close: () => void) => JSX.Element;\n  footer?: (close: () => void) => JSX.Element;\n  size?: 'small' | 'medium' | 'large' | 'x-large' | '2x-large';\n  className?: string;\n  parentId?: string;\n  children: (isOpen: boolean) => JSX.Element;\n}\n\nexport interface IModalTheme {\n  initial: string[];\n  header: string[];\n  title: string[];\n  footer: string[];\n  closeIcon: string[];\n  overlay: string[];\n  size: Record<NonNullable<IModalProps['size']>, string[]>;\n}\n\nexport const styles: IModalTheme = {\n  overlay: [\n    'bg-black/70',\n    'grid',\n    'justify-items-center',\n    'items-center',\n    'z-50',\n  ],\n  initial: [\n    'bg-white',\n    'rounded-md',\n    'mx-2',\n    ' px-4 ',\n    'pt-5',\n    'pb-4',\n    'shadow-xl',\n  ],\n  header: ['flex', ' justify-between', 'pb-3'],\n  closeIcon: ['cursor-pointer', 'p-3'],\n  title: ['text-lg', 'leading-6', 'flex', 'items-center'],\n  footer: ['pt-4'],\n  size: {\n    small: ['max-w-sm'],\n    medium: ['max-w-md'],\n    large: ['max-w-lg'],\n    'x-large': ['max-w-xl'],\n    '2x-large': ['max-w-2xl'],\n  },\n};\nconst Modal: React.FC<IModalProps> = ({ children, ...rest }) => {\n  const parentId = useFloatingParentNodeId();\n\n  if (parentId === null) {\n    return (\n      <FloatingTree>\n        <ModalComp {...rest}>{children}</ModalComp>\n      </FloatingTree>\n    );\n  } else {\n    return (\n      <ModalComp {...rest} parentId={parentId}>\n        {children}\n      </ModalComp>\n    );\n  }\n};\n\nconst ModalComp: React.FC<IModalProps> = ({\n  header,\n  content,\n  footer,\n  useDismiss = true,\n  interactive = true,\n  useMotion = true,\n  useFocusManager = true,\n  size = 'large',\n  className,\n  parentId,\n  children,\n}) => {\n  const nodeId = useFloatingNodeId();\n\n  const { open, triggerProps, overlay } = useOverlay({\n    role: 'dialog',\n    portalId: 'modal',\n    nodeId,\n    parentId,\n    use: { click: true, dismiss: useDismiss, focus: false, hover: false },\n    usePortal: true,\n    useBackdrop: true,\n    useFocusManager,\n    returnFocus: true,\n    interactive,\n    useMotion,\n    animations: {\n      open: {\n        opacity: 1,\n        transform: 'scale(1)',\n        transition: { duration: 0.1, ease: [0.165, 0.84, 0.44, 1] },\n      },\n      close: {\n        opacity: 0,\n        transform: 'scale(0.95)',\n        transition: { duration: 0.1, ease: [0.165, 0.84, 0.44, 1] },\n      },\n    },\n    backdropClassName: clsx(\n      'z-50 grid bg-slate-500 bg-opacity-30 transition-opacity items-center place-items-center',\n    ),\n    wrapperClassName: `${styles.size[size]} w-full`,\n    className: clsx(\n      `modal bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all m-2 ${styles.size[size]} w-full`,\n      className,\n    ),\n    overlay: (close) => (\n      <>\n        {useDismiss && (\n          <div className=\"block absolute top-0 right-0 pt-5 pr-5\">\n            <button\n              type=\"button\"\n              className=\"bg-white rounded-md text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\"\n              onClick={close}\n            >\n              <span className=\"sr-only\">Close</span>\n              <XIcon className=\"h-6 w-6\" aria-hidden=\"true\" />\n            </button>\n          </div>\n        )}\n        <div className=\"bg-white px-4 pt-5 pb-4\">\n          <div className=\"flex items-start\">\n            <div className=\"mt-0 mx-4\">\n              <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n                {header(close)}\n              </h3>\n              <div className=\"my-3\">{content(close)}</div>\n            </div>\n          </div>\n        </div>\n        {footer && (\n          <div className=\"bg-gray-50 px-4 py-4 sm:px-4 flex flex-row-reverse\">\n            {footer(close)}\n          </div>\n        )}\n      </>\n    ),\n  });\n\n  return (\n    <>\n      {cloneElement(children(open), triggerProps)}\n      {cloneElement(overlay)}\n    </>\n  );\n};\n\nexport default Modal;\n"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["What is ",{"$$mdtype":"Tag","name":"Link","attributes":{"title":"React.cloneElement","target":"_blank","href":"https://reactjs.org/docs/react-api.html#cloneelement"},"children":[]},"?"]}],"frontmatter":{"title":"Modal","description":"Let's create a Nestable Modal component with useOverlay"},"file":{"path":"/component-modal.md"}}},"__N_SSG":true}