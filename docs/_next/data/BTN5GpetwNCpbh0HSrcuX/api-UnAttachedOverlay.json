{"pageProps":{"markdoc":{"content":[{"$$mdtype":"Tag","name":"p","attributes":{},"children":[{"$$mdtype":"Tag","name":"strong","attributes":{},"children":["AttachedOverlay"]}," is a low level component for building tooltip, popover like attached floating elements."]},{"$$mdtype":"Tag","name":"hr","attributes":{},"children":[]},{"$$mdtype":"Tag","name":"h2","attributes":{"id":"i-attached-overlay-props"},"children":[{"$$mdtype":"Tag","name":"code","attributes":{},"children":["IAttachedOverlayProps"]}]},{"$$mdtype":"Tag","name":"Fence","attributes":{"language":"ts"},"children":["interface IUnAttachedOverlayProps extends Omit<IOverlay, 'placement'> {\n    children: (isOpen: boolean) => JSX.Element;\n}\n"]},{"$$mdtype":"Tag","name":"h2","attributes":{"id":"i-overlay"},"children":[{"$$mdtype":"Tag","name":"code","attributes":{},"children":["IOverlay"]}]},{"$$mdtype":"Tag","name":"Fence","attributes":{"language":"ts"},"children":["export interface IOverlay {\n    // aria attribute\n    role?: 'tooltip' | 'dialog' | 'menu' | 'listbox' | 'grid' | 'tree';\n    // for nested overlays\n    nodeId?: string;\n    // for nested overlays\n    parentId?: string;\n    // actual DOM id attribute\n    portalId?: string;\n    // for overlay placement (use custom for modal, drawer etc.)\n    placement?: 'bottom-end' | 'bottom-start' \n             | 'left-end' | 'left-start' \n             | 'right-end' | 'right-start' \n             | 'top-end' | 'top-start';\n    // triggers wont't work if you don't pass this true.\n    interactive?: boolean;\n    // determines if animations are enabled or not\n    animations?: {\n        open: Variant; // framer-motion type\n        close: Variant; // framer-motion type\n    };\n    // determines if animations are enabled or not (AnimatePresence)\n    useMotion?: boolean;\n    // portals your floating element outside the main app node\n    usePortal?: boolean;\n    // provides base styling for a fixed overlay element to dim content\n    useBackdrop?: boolean;\n    // provides flexible focus management for a floating element\n    useFocusManager?: boolean;\n    // determines if focus should be returned to previous element\n    // useFocusManager should be true for this to work\n    returnFocus?: boolean; \n    // displaces the floating element from its core placement along the specified axes\n    offset?: number; \n    // moves the floating element along the specified px in order to keep it in view\n    shift?: number; \n    // trigger delay\n    delay?: {\n        open: number;\n        close: number;\n    };\n    // trigger element events\n    use?: { \n        click?: boolean; // adds click event listeners \n        dismiss?: boolean; // adds listeners that dismiss (close the floating element.\n        focus?: boolean; // adds focus event listeners \n        hover?: boolean; // adds hover event listeners \n    };\n    // your floating element (overlay)\n    overlay: (close: () => void) => JSX.Element;\n    // classes for floating element\n    className?: string;\n    // classes for floating element wrapper\n    wrapperClassName?: string;\n    // classes for floating element backdrop\n    backdropClassName?: string;\n}\n"]}],"frontmatter":{"title":"Interfaces","description":"AttachedOverlay props"},"file":{"path":"/api-UnAttachedOverlay.md"}}},"__N_SSG":true}