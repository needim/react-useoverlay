{"pageProps":{"markdoc":{"content":[{"$$mdtype":"Tag","name":"p","attributes":{},"children":["Let's create a Tooltip component."]},{"$$mdtype":"Tag","name":"hr","attributes":{},"children":[]},{"$$mdtype":"Tag","name":"h2","attributes":{"id":"1-quick-way-using-attached-overlay-component"},"children":["1. Quick Way - using ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["AttachedOverlay"]}," component"]},{"$$mdtype":"Tag","name":"Fence","attributes":{"language":"jsx"},"children":["import React from 'react';\nimport type { Variant } from 'framer-motion';\nimport clsx from 'clsx';\n\nimport { IAttachedOverlayProps, AttachedOverlay } from 'react-useoverlay';\n\n// predefined color props for the tooltip\ntype color = 'primary' | 'secondary' | 'success' | 'error' | 'warning' | 'info';\ninterface ITooltipTheme {\n  initial: string[];\n  animations: { open: Variant; close: Variant };\n  color: Record<color, string[]>;\n}\n\n// I'm using Tailwind for theming of the tooltip.\n// But you are free to use any other solutions.\nconst styles: ITooltipTheme = {\n  initial: ['text-white font-medium rounded shadow-sm px-3 py-1.5'],\n  animations: {\n    open: {\n      opacity: 1,\n      transform: 'scale(1)',\n      transition: { duration: 0.15, ease: [0.165, 0.84, 0.44, 1] },\n    },\n    close: {\n      opacity: 0,\n      transform: 'scale(0)',\n      transition: { duration: 0.15, ease: [0.165, 0.84, 0.44, 1] },\n    },\n  },\n  color: {\n    primary: ['bg-indigo-500'],\n    secondary: ['bg-slate-500'],\n    success: ['bg-green-500'],\n    error: ['bg-red-500'],\n    warning: ['bg-amber-500'],\n    info: ['bg-sky-500'],\n  },\n};\n\n// component prop interface\n// we are omiting `overlay` & `children` props because we are gonna handle it by ourself\nexport interface MyCustomTooltipProps\n  extends Omit<IAttachedOverlayProps, 'overlay' | 'children'> {\n  myCustomLabel: string; // you can also accept ReactNode etc\n  className?: string;\n  color?: color;\n  children: JSX.Element;\n}\n\n// actual component\nexport const Tooltip: React.FC<MyCustomTooltipProps> = ({\n  // define your defaults for the tooltip\n  placement = 'top',\n  interactive = true,\n  useMotion = true,\n  offset = 8,\n  shift = 8,\n  delay = { open: 0, close: 0 },\n  use = { hover: true, focus: true },\n  usePortal = true,\n  // your custom props\n  color = 'primary',\n  myCustomLabel,\n  children,\n  className,\n  ...rest\n}) => {\n  const classes = clsx(styles.initial, styles.color[color], className);\n\n  return (\n    <AttachedOverlay\n      {...{\n        interactive,\n        placement,\n        useMotion,\n        offset,\n        shift,\n        delay,\n        use,\n        usePortal,\n      }}\n      overlay={() => <div className={classes}>{myCustomLabel}</div>}\n      {...rest}\n    >\n      {/* AttachedOverlay expects function as a child */}\n      {/* we are gonna need it later for other components */}\n      {() => children}\n    </AttachedOverlay>\n  );\n};\n"]},{"$$mdtype":"Tag","name":"h2","attributes":{"id":"2-custom-way-using-use-overlay-hook"},"children":["2. Custom Way - using ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["useOverlay"]}," hook"]},{"$$mdtype":"Tag","name":"Fence","attributes":{"language":"jsx"},"children":["import React, { cloneElement } from 'react';\nimport type { Placement } from '@floating-ui/react-dom-interactions';\nimport type { Variant } from 'framer-motion';\nimport clsx from 'clsx';\n\nimport { IOverlay, useOverlay } from 'react-useoverlay';\n\n// predefined color props for the tooltip\ntype color = 'primary' | 'secondary' | 'success' | 'error' | 'warning' | 'info';\nexport interface ITooltipTheme {\n  initial: string[];\n  animations: { open: Variant; close: Variant };\n  color: Record<color, string[]>;\n}\n\n// I'm using Tailwind for theming of the tooltip.\n// But you are free to use any other solutions.\nexport const styles: ITooltipTheme = {\n  initial: [\n    'text-white font-medium rounded shadow-sm px-3 py-1.5',\n  ],\n  animations: {\n    open: {\n      opacity: 1,\n      transform: 'scale(1)',\n      transition: { duration: 0.15, ease: [0.165, 0.84, 0.44, 1] },\n    },\n    close: {\n      opacity: 0,\n      transform: 'scale(0)',\n      transition: { duration: 0.15, ease: [0.165, 0.84, 0.44, 1] },\n    },\n  },\n  color: {\n    primary: ['bg-indigo-500'],\n    secondary: ['bg-slate-500'],\n    success: ['bg-green-500'],\n    error: ['bg-red-500'],\n    warning: ['bg-amber-500'],\n    info: ['bg-sky-500'],\n  },\n};\n\n// component prop interface\nexport interface ITooltipProps\n  extends Pick<\n    IOverlay,\n    | 'delay'\n    | 'useMotion'\n    | 'interactive'\n    | 'offset'\n    | 'shift'\n    | 'usePortal'\n    | 'className'\n  > {\n  label: string;\n  placement?: Placement;\n  color?: color;\n  children: JSX.Element;\n}\n\n// actual component\nexport const Tooltip: React.FC<ITooltipProps> = ({\n  interactive = true,\n  useMotion = true,\n  placement = 'top',\n  color = 'primary',\n  offset = 8,\n  shift = 8,\n  delay = { open: 0, close: 0 },\n  usePortal = true,\n  label,\n  children,\n  className,\n}) => {\n  const classes = clsx(styles.initial, styles.color[color], className );\n\n  // we are passing almost all props to useOverlay hook\n  const { triggerProps, overlay } = useOverlay({\n    // we are checking this to disable the tooltip triggers\n    interactive,\n    // we are wrapping with AnimatePresence to make it motion compatible\n    useMotion, \n    // start of floating-ui props\n    placement, \n    role: 'tooltip', \n    use: { click: false, dismiss: true, focus: true, hover: true }, \n    usePortal, \n    offset, \n    shift, \n    delay, \n    animations: styles.animations, // framer motion\n    // here you can pass your floating element\n    // this overlay function gives you the close function\n    // so you can use it in your component\n    // we will see it in action in the next examples live modal & drawer\n    // for tooltip we don't need to close element manually\n    // because we are only using useHover and useFocus triggers\n    overlay: () => <div className={classes}>{label}</div>,\n  });\n\n  // we need to wrap string children in a span to make them interactive\n  return (\n    <>\n      {typeof children === 'string' ? (\n        <span {...triggerProps}>{children}</span>\n      ) : (\n        // if children is not a string, we can just clone it\n        cloneElement(children, triggerProps)\n      )}\n      {/* this is the actual overlay */}\n      {cloneElement(overlay)}\n    </>\n  );\n};\n"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["What is ",{"$$mdtype":"Tag","name":"Link","attributes":{"title":"React.cloneElement","target":"_blank","href":"https://reactjs.org/docs/react-api.html#cloneelement"},"children":[]},"?"]}],"frontmatter":{"title":"Tooltip","description":"Let's create a Tooltip component with useOverlay"},"file":{"path":"/component-tooltip.md"}}},"__N_SSG":true}